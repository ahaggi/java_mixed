package no.hib.dat101.utsyn.jframe;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import no.hib.dat101.*;
import no.hib.dat101.utsyn.Database;

import java.awt.event.ActionEvent;
import java.util.List;
import java.awt.event.AdjustmentListener;
import java.awt.event.AdjustmentEvent;

public class StigeOgSlange extends JFrame implements ChangeListener{

	/**
	 * 
	 */
	private static final long serialVersionUID = -8676592650951494887L;
	private JPanel contentPane;
	private static JLabel[][] lbl_Ruter;

	private static JTextField textField;
	static JLabel handlingLabel;
	static JLabel lblBrikker[];

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {

					StigeOgSlange frame = new StigeOgSlange();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public StigeOgSlange() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(50, 50, 539, 650);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(204, 0, 0));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JButton btnNewButton = new JButton("Start");
		btnNewButton.addActionListener(enter);
		btnNewButton.setBounds(421, 527, 89, 23);
		contentPane.add(btnNewButton);

		textField = new JTextField();
		textField.addActionListener(enter);
		textField.setBounds(10, 528, 86, 20);
		contentPane.add(textField);
		textField.setColumns(10);

		handlingLabel = new JLabel("tast inn antall spillere (fom 2 tom 4)");
		handlingLabel.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		handlingLabel.setHorizontalAlignment(SwingConstants.CENTER);
		handlingLabel.setBounds(45, 561, 436, 20);
		handlingLabel.setOpaque(true);
		contentPane.add(handlingLabel);


		/************************************************************/
		JSlider tur_speed = new JSlider(JSlider.HORIZONTAL,1, 10, 5);
		tur_speed.setPaintTicks(true);
		tur_speed.setBounds(106, 519, 305, 31);


		tur_speed.addChangeListener(this);

		//Turn on labels at major tick marks.

		tur_speed.setMajorTickSpacing(10);
		tur_speed.setMinorTickSpacing(1);
		tur_speed.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
		Font font = new Font("Serif", Font.ITALIC, 12);
		tur_speed.setFont(font);
		contentPane.add(tur_speed);
		/************************************************************/



		lbl_Ruter = new JLabel[10][10];
		lblBrikker = new JLabel[4];

		lagRuter_Label();
		setRuter_LabelPosisjon();
		lagBrikker_Label();

		JLabel thumb = new JLabel();

		thumb.setIcon(new ImageIcon(new ImageIcon("ressurs\\spill.png").getImage().getScaledInstance(500, 500, Image.SCALE_DEFAULT)));
		thumb.setBounds(10, 11, 500, 500);

		lagSpill();
		contentPane.add(thumb);

	}
	
	/** Listen to the slider. */
	public void stateChanged(ChangeEvent e) {
		JSlider source = (JSlider)e.getSource();
		if (!source.getValueIsAdjusting()) {


			spill.MILLISEKUND_TUR=(int)(1000/source.getValue());
			System.out.println(1000/source.getValue());
		}
	}
	
	private void lagRuter_Label() {
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j <= 9; j++) {
				lbl_Ruter[i][j] = new JLabel();
				lbl_Ruter[i][j].setBorder(new LineBorder(new Color(0, 0, 0)));
				lbl_Ruter[i][j].setHorizontalAlignment(SwingConstants.CENTER);
				lbl_Ruter[i][j].setOpaque(false);
				contentPane.add(lbl_Ruter[i][j]);
			}
		}

	}

	private void setRuter_LabelPosisjon() {
		for (int i = 0; i <= 9; i++) {

			if (i % 2 == 0) {
				for (int j = 0; j <= 9; j++) {
					lbl_Ruter[i][j].setBounds(10 + (j * 50), 11 + ((9 - i) * 50), 50, 50);
				}
			} else {
				for (int j = 9; j >= 0; j--) {
					lbl_Ruter[i][j].setBounds(10 + ((9 - j) * 50), 11 + ((9 - i) * 50), 50, 50);
				}
			}
		} // for
	}

	private void lagBrikker_Label() {
		for (int i = 0; i < 4; i++) {
			lblBrikker[i] = new JLabel();
			lblBrikker[i].setBorder(new LineBorder(new Color(0, 0, 0)));
			lblBrikker[i].setHorizontalAlignment(SwingConstants.CENTER);
			lblBrikker[i].setIcon(new ImageIcon(new ImageIcon("ressurs\\" + i + ".png").getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT)));

			lblBrikker[i].setOpaque(true);
			lblBrikker[i].setBounds(10, 11 + ((9) * 50), 25, 25);
			// setter alle brikker på 1. rute-posisjon
			Point justert_pnt = juster_lokasjon_pluss(i, lbl_Ruter[0][0].getLocation());
			lblBrikker[i].setLocation(justert_pnt);

			contentPane.add(lblBrikker[i]);

		}
	}

	private static void lagBrikker_reset() {
		for (int i = 0; i < 4; i++) {
			Point justert_pnt = juster_lokasjon_pluss(i, lbl_Ruter[0][0].getLocation());
			lblBrikker[i].setLocation(justert_pnt);

		}
	}




	/**plassering av brikker etter hvert logg/tur + oppdater handlingLabel*/
	public static void oppdater_komponenter(Logg l) {
		if(lblBrikker!=null){
		Logg logg = l;
		int fraPos = logg.getFraRute().getRuteId() - 1; // legg merke til -1
		int x = fraPos / 10;
		int y = fraPos % 10;

		int i = 0;
		int ndx=-1;
		while ( i < lblBrikker.length &&ndx ==-1) {
			Point justert_pnt = juster_lokasjon_minus(i, lblBrikker[i].getLocation());
			if (justert_pnt.equals(lbl_Ruter[x][y].getLocation())) // merk !=
				ndx=i;
			i++;
		}
		int tilPos = logg.getTilRute().getRuteId() - 1; // legg merke til -1
		x = tilPos / 10;
		y = tilPos % 10;

		Point justert_pnt = juster_lokasjon_pluss(ndx, lbl_Ruter[x][y].getLocation());
		lblBrikker[ndx].setLocation(justert_pnt);

		handlingLabel.setText(logg.getHandling());
		if ( handlingLabel.getText().contains("har vunnet")) {
			iterate(reset, 3000);
			//TODO
		}
		}
	}

	public static Point juster_lokasjon_pluss (int i, Point point){
		int leggTilX=0;
		int leggTilY=0;

		if (i==1) 
			leggTilX=25;
		else if (i==2){
			leggTilY=25; 
		}else if (i==3){
			leggTilX=25; 
			leggTilY=25; 
		}
		int x=(int) point.getX()+leggTilX;
		int y=(int) point.getY()+leggTilY;

		Point nyPoint =new Point(x, y);


		return nyPoint;
	}

	/**juster brikkere så de ikke ligger opp hverandre*/
	public static Point juster_lokasjon_minus (int i, Point point){
		int leggTilX=0;
		int leggTilY=0;

		if (i==1) 
			leggTilX=-25;
		else if (i==2){
			leggTilY=-25; 
		}else if (i==3){
			leggTilX=-25; 
			leggTilY=-25; 
		}

		int x=(int) point.getX()+leggTilX;
		int y=(int) point.getY()+leggTilY;

		Point nyPoint =new Point(x, y);

		return nyPoint;
	}


	public static void iterate(Action name, int miliseconds) {
		timer = new Timer(miliseconds, name);
		timer.setInitialDelay(miliseconds);
		timer.setDelay(miliseconds);
		timer.setRepeats(false);
		timer.start();
	}

	private static Action reset = new AbstractAction() {
		private static final long serialVersionUID = 7892201122490351698L;

		@Override
		public void actionPerformed(ActionEvent arg0) {
			//TODO
			lagBrikker_reset();
			handlingLabel.setText("tast inn antall spillere (fom 2 tom 4)");
			textField.setEnabled(true);
			textField.setText("");
			textField.requestFocus();

		}
	};

	static Timer timer = null;
	static Spiller vinner = null;
	private static Spill spill;
	Database db =new Database();

	public void lagSpill(){

		if (db.hentFraDb()==null) {
			int antallspillere = 4;
			spill = new Spill(antallspillere);
			db.setSpill(spill);
			db.persist();

		}

	}
	Action enter = new AbstractAction() {

		/**
		 * 
		 */
		private static final long serialVersionUID = -1659365131717518851L;

		@Override
		public void actionPerformed(ActionEvent e) {
			try {

				int antallspillere = Integer.valueOf(textField.getText());

				Spill spill = db.getSpill();
				Brett brett = spill.getBrett();
				List<Brikke> brikke = spill.getBrikker();

				Spill nyttSpill = new Spill(brett, brikke, antallspillere);
				db.setSpill(nyttSpill);
				nyttSpill.startSpill_timer();
				db.persist();

				textField.setText("");
				textField.setEnabled(false);

			} catch (NumberFormatException e2) {
				JOptionPane.showMessageDialog(null, "Ulovlig input: " + e2.getMessage());
				textField.setText("");
			}

		}
	};
}
